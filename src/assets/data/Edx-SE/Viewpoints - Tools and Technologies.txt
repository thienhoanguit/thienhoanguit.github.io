Welcome to Insidersâ€™ Viewpoints: Tools and Technologies. In this video, we will hear
from experts discussing their favorite tools and technologies for software engineering projects.
Our team uses Git and GitHub every single day for all of our projects.
We use it for tracking code. We use it for collaboration and we use it for tracking bugs,
features, and tasks for all of our projects.
I believe most open source projects are now using Git. Every project I've contributed to,
whether open source or closed has used it gets true value is most apparent when you're working
on a team with multiple people, at which point you'll be glad to have things like
feature branches and pull requests. But even if you are working on a project where you're
the sole committer, I recommend using Git, and in particular GitHub for the Community aspect
So if you are a front end developer, if you understand JavaScript and picking up
back in using a framework, like Node JS is not that much of a stretch, actually started building,
you know, static websites, and then slowly learned how to how to put in dynamic content
using JavaScript. And then I had to use Java, or PHP to build my back end systems in on the server.
For front end development, you're primarily using HTML, CSS, and JavaScript. If you're very
front end focused, you might want to try out an ID built for that specific purpose,
such as brackets if you want to keep things more general, I recommend VS. Code.
In either case, I recommend installing IDE extensions for automatic formatting and linting
of your code. By using prettier and eslint these will help you catch issues as early as possible
for back end development the tools are quite a bit more varied so it's
hard to give specific recommendations. But if you choose node JS, you'll be able to use some
of these same tools that I mentioned for front end development. Otherwise, I recommend just
looking into what IDE extensions are available and what linters and auto formatters are available
JavaScript is a very powerful language. It lets you do pretty much anything you can imagine,
including shooting yourself in the foot if you're not careful.
The practices I typically follow with JavaScript include proper scoping of variables and functions.
And writing unit and integration tests for my features.
React JS was developed at Facebook very popular. Angular is a framework operated
by Google that allows for development of single page applications. SPA's
jQuery is possibly the most popular and oldest library out there, created by John Resig in 2006,
and jQuery is frequently used with both Angular and React. Backbone is a lightweight JavaScript
library that is very popular in terms of back end languages and frameworks.
Node.js is an open source server side platform built on the Google Chrome JavaScript engine.
It uses an asynchronous single threaded architecture that allows it to serve a
very large number of concurrent connections. Flask is a framework used on Python that is popular with
Pythonistas and the Spring framework based on Java has been around for years and remains popular
We use React JavaScript framework it is better than Angular in terms of speed and efficiency.
React is easier to learn than other JavaScript frameworks, which makes its adoption in the
team easy. It also resolves, it also resolves the problems related to cross browser issues.
Another great feature of React is the use of JSX. JSX is helpful when working with UI
inside the JavaScript code. It helps react to show more useful error and warning messages.
My favorite front end JavaScript framework would be React JS, I love the whole component driven
design and architecture that you have then that you have to follow when you create
a React JS based application. I also like the idea of, you know,
props and states to hold your, the state of your application.
By using Express JS for back end development, we are able to scale applications quickly.
We can code both front end and back end with the help of JavaScript easily by using
Express JS. Express JS is supported with the Google V eight engine with the help of which
you will be able to get higher performance without any lag or error in processing.
It also supports the caching features, so you would not have to re execute the
codes again and again. Moreover, moreover, it will help web pages to load faster than ever
When working with Node.js, I'll, I'll give you two of my favorite
packages that I use on a daily basis. So first is making requests to web services.
I use a library like Axios, that helps me create these requests with the right headers, and also
provide me with callback functions and or promises to be able to handle the responses that come back.
My second package would be when I'm working with databases,
I'll use NPM packages, more likely than not to talk to an external database,
regardless of if it's, if it's a relational database, or a no SQL database.
So in writing JavaScript, I really like to take advantage of the features. And yes, six, because
it can make my code look cleaner, easier to read, and, and just more beautiful,
such as the arrow functions, or the dot dot dot operator. And so I encourage you to,
after learning JavaScript, dive into ESX a bit and have fun with it.