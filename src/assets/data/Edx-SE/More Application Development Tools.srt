0
00:00:00,000 --> 00:00:09,860
(Music)

1
00:00:09,860 --> 00:00:12,940
Welcome to More Application Development Tools.

2
00:00:12,940 --> 00:00:18,180
Let’s look at some tools which can help you get your app built and deployed:

3
00:00:18,180 --> 00:00:23,850
CI/CD, Build Tools, Packages, and Package Managers.

4
00:00:23,850 --> 00:00:29,880
CI/CD refers to the practices of continuous integration and either continuous delivery

5
00:00:29,880 --> 00:00:32,150
or continuous deployment.

6
00:00:32,150 --> 00:00:38,260
CI/CD is a best practice for devops teams enabling developers to deliver frequent changes

7
00:00:38,260 --> 00:00:39,730
reliably.

8
00:00:39,730 --> 00:00:46,290
Implemented through a build-automation server, Continuous Integration (CI) ensures that all

9
00:00:46,290 --> 00:00:49,510
the code components work together smoothly.

10
00:00:49,510 --> 00:00:55,540
A CI build environment enables you to integrate newly developed code frequently, at least

11
00:00:55,540 --> 00:01:01,260
every day, if not every hour, depending on how quickly the project changes.

12
00:01:01,480 --> 00:01:09,420
Continuous delivery (CD) begins where CI ends. The CI process automatically builds and tests

13
00:01:09,430 --> 00:01:17,100
your code, then CD deploys all code changes in a build to a testing or staging environment.

14
00:01:17,100 --> 00:01:22,190
A build tool transforms your source code into the binaries needed for installation.

15
00:01:22,190 --> 00:01:28,060
Build tools organize your source code, set compile flags, and manage dependencies.

16
00:01:28,060 --> 00:01:33,590
They are most important in environments where there are many inter-connected projects, with

17
00:01:33,590 --> 00:01:37,320
multiple developers contributing to each project.

18
00:01:37,320 --> 00:01:42,401
In these environments it can be very difficult to keep track of what changes were made, in

19
00:01:42,401 --> 00:01:48,549
what order, what dependencies exist, and what needs to be incorporated in the next build.

20
00:01:48,549 --> 00:01:52,409
So automation is key to keeping everything running smoothly.

21
00:01:52,409 --> 00:01:58,479
Build automation can automate a wide variety of tasks that developers do in their day-to-day

22
00:01:58,479 --> 00:02:00,119
activities like:

23
00:02:00,119 --> 00:02:02,310
Downloading dependencies.

24
00:02:02,310 --> 00:02:04,990
Compiling source code into binary code.

25
00:02:04,990 --> 00:02:06,880
Packaging that binary code.

26
00:02:06,880 --> 00:02:08,690
Running tests and

27
00:02:08,690 --> 00:02:11,870
deployment to production systems.

28
00:02:11,870 --> 00:02:16,480
You can initiate a build from the command line or from an IDE.

29
00:02:16,480 --> 00:02:21,290
There are two categories of Build Tools widely in use:

30
00:02:21,290 --> 00:02:26,290
Build-automation utilities, which generate build artifacts like executables, by compiling

31
00:02:26,290 --> 00:02:29,430
and linking source code.

32
00:02:29,430 --> 00:02:36,260
Build-automation servers, which execute build-automation utilities on a scheduled or triggered basis.

33
00:02:36,260 --> 00:02:38,670
Some examples of build tools are:

34
00:02:38,670 --> 00:02:42,459
Webpack – a module bundler for JavaScript and

35
00:02:42,459 --> 00:02:45,810
Babel – a JavaScript compiler.

36
00:02:45,810 --> 00:02:50,280
Now that you have your app developed and tested, you’re ready to deploy.

37
00:02:50,280 --> 00:02:51,950
But how does that happen?

38
00:02:51,950 --> 00:02:57,360
The app needs to be simple and trouble free for the user to install, so a commonly used

39
00:02:57,360 --> 00:03:05,370
technique is to collect all the necessary files and bundle them together into a package.

40
00:03:05,370 --> 00:03:10,440
Packages are archive files that contain the app files, instructions for installation,

41
00:03:10,440 --> 00:03:13,510
and any metadata that you choose.

42
00:03:13,510 --> 00:03:19,090
They have their own metadata too, including the package description, package version,

43
00:03:19,090 --> 00:03:24,880
and any dependencies, like other packages that need to be installed beforehand.

44
00:03:24,880 --> 00:03:30,120
Once you have bundled your app into a package, you can use a package manager to distribute it.

45
00:03:30,680 --> 00:03:36,739
Package managers take care of the tasks of finding, installing, maintaining or uninstalling

46
00:03:36,739 --> 00:03:40,920
software packages at the user's request.

47
00:03:40,920 --> 00:03:42,120
Package management systems:

48
00:03:42,120 --> 00:03:46,209
Coordinate with file archivers to extract package archives

49
00:03:46,209 --> 00:03:52,099
Verify checksums and digital certificates to ensure the integrity and authenticity of

50
00:03:52,099 --> 00:03:53,099
the package

51
00:03:53,099 --> 00:04:00,550
Locate, download, install, or update existing software from a software repository and

52
00:04:00,550 --> 00:04:06,569
manage dependencies to ensure a package is installed with all packages it requires.

53
00:04:06,569 --> 00:04:11,950
Some commonly used package managers for each of the major platforms are listed here:

54
00:04:11,950 --> 00:04:20,299
On Linux - Debian Package Management System (DPKG) and Red Hat Package Manager (RPM)

55
00:04:20,299 --> 00:04:22,259
On Windows - Chocolatey

56
00:04:22,259 --> 00:04:24,759
On Android - Package Manager

57
00:04:24,759 --> 00:04:29,520
On MacOS - Homebrew and MacPorts

58
00:04:29,520 --> 00:04:34,099
Any libraries or utility code that is developed as part of the application

59
00:04:34,099 --> 00:04:38,419
is managed with the cloud application package managers.

60
00:04:38,419 --> 00:04:42,849
Here are some examples of package managers for popular languages:

61
00:04:42,849 --> 00:04:46,509
for Node.js/Javascript - npm

62
00:04:46,509 --> 00:04:49,400
for Java - Gradle and Maven

63
00:04:49,400 --> 00:04:51,650
for Ruby - RubyGems

64
00:04:51,650 --> 00:04:55,339
for Python - Pip and Conda

65
00:04:55,339 --> 00:04:58,791
In this video you’ve learned about some of the tools that you will utilize will support

66
00:04:58,791 --> 00:05:01,580
you in your career as a developer , including:

67
00:05:01,580 --> 00:05:06,099
CI/CD, Build Tools, Packages and Package Managers

