Welcome to Introduction to Software Stacks.After watching this video, you will be able to
describe software stack terminology,
identify some commonly used software stacks,
and list the benefits and challenges of different software stacks.
A software stack is a combination of technologies that includes software and
programming languages. Developers use a software stack to create applications and solutions such as
web and mobile apps. The set of individual technologies is stacked in a hierarchy and
work together to support the execution of an application. The higher levels in the stack
provide tasks or services for the user and the lower levels interact with the computer hardware.
Software stacks typically include:
Front-end technologies such as programming languages, frameworks, and user interface tools.
And back-end technologies such as programming languages,
frameworks, web servers, app servers, operating systems, messaging applications, and databases.
You might hear the term technology stack used in place of software stack. However,
a technology stack is a broader term that includes hardware and infrastructure like
virtual machines, containers, storage, and load balancers, as well as the software stack.
The simplest implementation of a software stack consists of a presentation layer,
a business logic layer, and a data layer. However, more complex applications use more complex stacks,
which could include software for virtualization, scheduling and
orchestration, runtime environments, database connectivity, networking, and security.
The software and services that make up a stack can be from a variety of sources:
from internal resources, to third party providers, to cloud providers.
There’s no formal definition of the structure of a stack, the only rule being that the software and
services included must support an application’s development, functionality, or deployment.
When you’re using a software stack, you don’t have to use all of the available layers,
you only need to use those which are relevant to your solution.
There are many different examples of software stacks,
The Python-Django stack, uses the popular Python programming language alongside the
Django web framework. This combination is all open source and commonly used for large-scale,
fast-changing web applications.
The Ruby on Rails stack, uses the Ruby programming language with a server-side
web application framework. Ruby on Rails is great with JSON or XML for data transfer
and HTML, CSS, and JavaScript for front-end development.
And the ASP.NET stack includes Microsoft technologies such as the ASP.NET MVC
framework, the IIS web server, SQL Server, and Azure.
You’ll learn more about the LAMP, MEAN, MEVN, and MERN stacks next.
The LAMP stack runs on the Linux operating system. It uses the Apache HTTP or Web server,
MySQL databases, and the PHP programming language. LAMP is an example of an early
incarnation of a software stack designed for building websites and cloud applications.
All its constituent parts are open source and loosely coupled, so it’s easy to swap
different options into the stack. For example, you could choose to use PostgreSQL instead of
MySQL for your database server, changing the LAMP stack to be the LAPP stack.
Similarly, you could use the Python programming language instead of PHP.
The MEAN stack uses a MongoDB database with an Express.js web application server framework,
the Angular.js framework for front-end JavaScript development,
and the Node.js platform for server-side scripting.
The MEAN software and services are platform agnostic, free, and open source.
There are other stacks related to the MEAN stack, including:
The MERN stack which replaces Angular.js with React,
and is a flexible and high-performing framework for developing front-ends.
And the MEVN stack which replaces Angular.js with Vue.js. Vue is a lighter-weight JavaScript
framework with less capabilities, but it can provide better performance than Angular.js.
Let’s consider some advantages and disadvantages of three different software stacks:
MEAN, MVEN, and LAMP.
MEAN is a free and open-source JavaScript software stack used for building web applications. The
biggest advantage of the MEAN stack is that all of the parts use JavaScript, so developers only
need to know a single language. The stack is also open source which means the cost is lucrative to
businesses and there is a lot of documentation and re-usable code for developers to use. Development
can happen quickly because Node.js has a huge collection of free, reusable module libraries.
However, the MEAN stack may not be well-suited for large-scale applications.
When using Express.js, the business logic often resides on the server preventing the reuse
of some services like batching operations. And MongoDB is great for unstructured data,
but it doesn’t provide the same level of functionality as a relational database.
The MEVN stack is a web stack like MEAN,
but it uses Vue.js instead of Angular.js for user interfaces.
MEVN and MEAN stacks have similar advantages,
but Vue.js is a much newer technology and doesn't have as many reusable libraries as Angular.js.
Like MEAN and MEVN, the software and services in the LAMP stack are open source meaning there are
lots of reusable chunks of code available to the developers. And because LAMP is one of the oldest
software stacks it’s easy to find support and reusable solutions. However, because the Linux
operating system is an integral part of the stack, it isn’t as flexible as MEAN and MEVN
which are platform agnostic. MySQL is a relational database, so the stack cannot take advantage of
unstructured data. The other disadvantage of the LAMP stack is that the back-end runs on PHP, Perl,
or Python, whereas the front-end uses JavaScript and HTML, making it harder for developers to
switch back and forth than the MEAN and MEVN stacks which use JavaScript throughout.
In this video, you learned that:
Software stacks are a combination of technologies for creating applications and solutions.
Software stacks can range from simple three-layered systems to many layers.
There are numerous types of software stacks for different developers and environments.
The biggest advantage of the MEAN stack is that all of the parts use JavaScript,
so developers only need to know a single language.
And, the LAMP stack on Linux works well for  relational data.