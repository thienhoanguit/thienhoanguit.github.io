0
00:00:05,700 --> 00:00:08,029
Welcome to Pair Programming.

1
00:00:08,029 --> 00:00:13,769
After watching this video, you will be able to describe pair programming and compare different

2
00:00:13,769 --> 00:00:19,340
styles and list the benefits and challenges of pair programming.

3
00:00:19,340 --> 00:00:24,730
Pair programming is an extension of teamwork where two developers work side-by-side at

4
00:00:24,730 --> 00:00:26,210
one computer.

5
00:00:26,210 --> 00:00:31,000
They can either be physically at the same computer or work virtually via video link

6
00:00:31,000 --> 00:00:32,719
or shared screens.

7
00:00:32,719 --> 00:00:38,800
The former is the preferred option, but virtual pair programming can also be productive.

8
00:00:38,800 --> 00:00:43,980
Pair programming is a type of Agile development where the two developers can plan and discuss

9
00:00:43,980 --> 00:00:50,900
their ideas continually as they create a solution, generally resulting in a better end product.

10
00:00:50,900 --> 00:00:56,490
There are various styles of pair programming: Driver/navigator style is the most common

11
00:00:56,490 --> 00:01:02,250
style, where one developer is the driver, typing in the code, and the other is the navigator,

12
00:01:02,250 --> 00:01:06,890
reviewing the code as it’s written and giving directions where to go next.

13
00:01:06,890 --> 00:01:11,619
The navigator also keeps an eye on the bigger picture of the overall solution.

14
00:01:11,619 --> 00:01:16,670
When working in this way, it’s important to regularly swap roles to keep both of the

15
00:01:16,670 --> 00:01:20,060
pair engaged across the whole task.

16
00:01:20,060 --> 00:01:23,560
Ping-pong style incorporates test-driven development.

17
00:01:23,560 --> 00:01:28,840
For each task, one developer writes a failing test and then the second developer writes

18
00:01:28,840 --> 00:01:30,950
code to pass that test.

19
00:01:30,950 --> 00:01:37,249
For each new task, they swap roles, so regularly changing who writes the test and who writes

20
00:01:37,249 --> 00:01:38,929
the implementation.

21
00:01:38,929 --> 00:01:44,159
The two developers work together at the end of each task refactoring the successful code

22
00:01:44,159 --> 00:01:47,020
to refine and improve it.

23
00:01:47,020 --> 00:01:51,890
Strong style pair programming is a good way for junior software engineers to learn from

24
00:01:51,890 --> 00:01:53,810
more experienced ones.

25
00:01:53,810 --> 00:01:59,280
The defining rule for this is that for an idea to go from your head to the computer,

26
00:01:59,280 --> 00:02:02,039
it must go through someone else’s hands.

27
00:02:02,039 --> 00:02:07,439
So, the more experienced of the pair is the navigator and the driver learns from witnessing

28
00:02:07,439 --> 00:02:10,959
their implementation and thought processes.

29
00:02:10,959 --> 00:02:16,170
For this to work well, the driver shouldn’t challenge any ideas until the full implementation

30
00:02:16,170 --> 00:02:22,319
is complete so as not to interrupt the flow of ideas from the navigator. Now

31
00:02:22,319 --> 00:02:24,489
pair programming has many benefits.

32
00:02:24,489 --> 00:02:29,970
It’s a good way to share knowledge and skills from one developer to another or between the

33
00:02:29,970 --> 00:02:35,280
two and a great way for a new team member to get up to speed on a project.

34
00:02:35,280 --> 00:02:39,810
As well as enhancing the technical skills of the pair, it’s also a good way of building

35
00:02:39,810 --> 00:02:44,519
soft skills such as communication and problem solving.

36
00:02:44,519 --> 00:02:49,931
Having two sets of eyes on the code often results in fewer typos, logic errors, and

37
00:02:49,931 --> 00:02:50,931
bugs.

38
00:02:50,931 --> 00:02:54,959
And it enables code reviews to be done on the fly.

39
00:02:54,959 --> 00:03:01,130
While this doesn’t replace formal code reviews, it does enable another layer of review.

40
00:03:01,130 --> 00:03:06,819
Having two people thinking about a problem can result in multiple initial ideas, but

41
00:03:06,819 --> 00:03:12,800
is likely to result in the optimal approach being chosen earlier in the process.

42
00:03:12,800 --> 00:03:17,519
And although pair programming can take longer than individuals writing the same solutions,

43
00:03:17,519 --> 00:03:23,269
it’s likely to result in better code with less time spent reviewing, testing, and bug

44
00:03:23,269 --> 00:03:24,629
fixing.

45
00:03:24,629 --> 00:03:27,939
There are also a few challenges to overcome.

46
00:03:27,939 --> 00:03:33,189
Working in a pair requires long periods of focus which can be exhausting for the two

47
00:03:33,189 --> 00:03:34,189
programmers.

48
00:03:34,189 --> 00:03:38,790
And personal or other work commitments can impact the pair schedule.

49
00:03:38,790 --> 00:03:44,860
Sometimes one of the pair can end up controlling the entire process, resulting in a more

50
00:03:44,860 --> 00:03:49,140
typist/programmer pairing which doesn’t benefit from any of the positives of pair

51
00:03:49,140 --> 00:03:50,140
programming.

52
00:03:50,140 --> 00:03:54,819
And at other times, individual personalities may not work well together.

53
00:03:54,819 --> 00:03:59,340
When multiple sets of pair programmers are present, their discussions can result in a

54
00:03:59,340 --> 00:04:04,069
noisy environment for the other workers in the room.

55
00:04:04,069 --> 00:04:09,681
In this video, you learned that: Pair programming is an Agile development technique where two

56
00:04:09,681 --> 00:04:12,610
developers work alongside each other.

57
00:04:12,610 --> 00:04:15,709
There are multiple styles of pair programming.

58
00:04:15,709 --> 00:04:21,370
And pair programming builds technical and soft skills, results in better quality code

59
00:04:21,370 --> 00:04:25,070
and solutions, and increases overall efficiency.

