(Music)
When you’re starting out as a Web Developer, it can be difficult to determine what you
need to learn and what order you should learn it in.
Understanding how the websites that you’re already familiar with are constructed and
delivered to you is a good starting point.
Let’s review the basics of how you interact with a website.
You launch an internet browser – there are lots available:
Google Chrome, Microsoft Edge, Mozilla Firefox, and Apple Safari are some of the most popular.
The browser has an address bar, into which you enter a URL, like www.IBM.com.
The browser then contacts the server with the name and requests the information that
makes up the website.
The server then sends a response, which contains the data that the client requires to display
the website.
For most websites, the server will return:
HTML, which defines the structure of the page, but doesn’t look very attractive
CSS, which adds styles and flair to the page and JavaScript, which adds interactivity and
dynamic content.
Content displayed by websites can contain elements that are either previously stored
on the server (called “static”) or generated each time they are requested by the client
(called “dynamic”).
Dynamic elements can involve information coming from other systems and applications, such
as databases.
Most websites contain static and dynamic elements to provide the best user experience.
Cloud Applications are similar to Websites in that they request content that a server
returns.
Cloud Apps are built to work seamlessly with a Cloud-based back-end infrastructure, Cloud-based
data storage and data processing, and other Cloud services, making them very scalable
and very resilient.
The environment for building websites and Cloud Applications is divided into two primary
areas:
front-end and back-end.
The front-end deals with everything that happens at the client-side, everything the user
can see and interact with.
You can choose to specialize in front-end coding, using HTML, CSS, JavaScript and related
frameworks, libraries, and tools.
The back-end deals with everything that happens on the server before the code and data are
sent to the client.
The back-end coding usually handles the logic and functionality that make the website or
app work, and the authentication processes that keep data secure.
Back-end developers may also work with relational or noSQL databases, even collaborating with
database administrators in bigger projects.
Full-stack developers have skills, knowledge, and experience in both front-end and back-end
environments.
Whichever way you choose to specialize, you will need the appropriate tools to help you
work.
The first tool most developers add to their resources is a code editor.
Developers also need tools to integrate, build, compile, and debug code.
Integrated Development Environments or IDEs incorporate some of these additional capabilities
beyond just code editing and make it easier to build and manage your code.
Good IDEs support multiple languages and integrate with management and storage tools like Git
and GitHub.
Other useful features are custom extensions and themes for supporting your working style
and environment.
Examples for code editors and IDEs include Sublime Text, Atom, Vim, VS Code, Visual Studio,
Eclipse and NetBeans.
In this brief overview, you learned about:
The basic communication between client and servers.
How websites are built and displayed,
Front-end development is about what happens on the client side,
Back-end development is about what happens on the server,
Full-stack development incudes both front-end and back-end development,
IDEs will help you create and manage your code.