Welcome to Insidersâ€™ Viewpoints: Pair Programming.
In this video, software engineers will discuss their experiences with peer programming and
share their thoughts about the benefits and potential challenges associated with this
way of working.
First, we'll begin by asking about their experiences with pair programming and about the benefits
they associate with it.
At every job I've ever had, there have come times where you pair up with someone else,
you get someone else sitting next to you at a computer, you're sitting next to them at
their computer, you're looking at a problem together, you're thinking about it.
Yes, I have actually, some of the benefits are definitely working with an engineer who
might be more of a senior engineer, because they have a lot of insight.
And they obviously have a lot of experience doing what you're probably trying to figure
out how to do.
And it's really great when it's someone who can both guide you but also kind of take take
a step back and not take over at the same time.
I think pair programming can can be very beneficial.
I think.
If you're when you're working with someone together, it's an opportunity to learn I think
pair programming can be very great in circumstances where someone is new to a team.
New to a programming language new to a set of tools, or a development environment
that is new to them, sitting next to someone who's an expert, I think can both help
you ramp up more quickly, it can help the the team itself, sort of understand where
you are, in terms of your own knowledge and journey and help put you in a place to
both succeed and utilize you in your skills as best as possible.
It does help you get real time feedback, you don't necessarily have to wait for code
to be sent out to be reviewed, and you can kind of, you know, brainstorm together
in real time on the actual implementation of it.
Ultimately, I try to keep in mind that the goal of pair programming is that everyone
has inherent blind spots in the way that they think.
And that the way that they approach a problem.
And if you are talking to somebody else, they can point out what your blind spots are.
And they're going to have different blind spots than you as well.
So you can point out their blind spots.
What do you think are the drawbacks and challenges of pair programming?
I think that can be a con sometimes when you're working with another engineer and you're
trying to pair program with someone who kind of like takes over and then doesn't allow
you to do your part or to learn especially if they kind of like already know how to do
something.
So it's kind of like a double-edged sword.
On the one hand, you want to get that practical experience of practice of pair programming
and you want to get that experience from someone else.
But at the same time, you want to make sure that you're learning.
I personally find pair programming to be a little frustrating.
Because the ways I go about solving problems can be very different than the ways other
people go about solving problems.
And it's not that I have some special, unique, wonderful technique, it's just that everyone's
brain works differently.
And watching someone else go through their workflow of how to solve a problem, they're
not clicking the exact same buttons that you are.
And that can get very frustrating to me.
It's like, why are you using your mouse because all those things, there's keystrokes
or like, you could be doing this so much faster.
And so I find it a challenge to do pair programming sometimes.
You actually need calendar time.
So you need to be able to dedicate time to sit together and work together and have an
aligned schedule.
You both you can either be physical, could do it virtually, but you need to make the
time to do it.
Peer programming, some can come with some overhead in terms of getting
off the ground.
So if you have a tight time crunch, competing priorities, maybe just not enough, there might
be not enough time in the schedule to allow for it, that can be one of the cons.
That it can while you can get long term, I think efficiency benefits from you know,
built, did writing the code together, because then support in the future will be easier
because you have more people who know how the code was written and what the intent was.
So there are definitely long term benefits.
But there could be you know, some short term costs to it.
So there are trade offs in that sense.